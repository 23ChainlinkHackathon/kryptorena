//SPDX-License-Identifier: MIT
pragma solidity ^0.8.8;

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol";
import "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol";

import "hardhat/console.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

import "./game.sol";

contract KryptorenaNft is VRFConsumerBaseV2, ERC721URIStorage, Ownable {
    Kryptorena public i_kryptorena;

    //Chainlink VRF Variables
    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;
    uint64 private immutable i_subscriptionId;
    bytes32 private immutable i_gasLane;
    uint32 private immutable i_callbackGasLimit;
    uint16 private constant REQUEST_CONFIRMATIONS = 3;
    uint32 private constant NUM_WORDS = 1;

    //NFT variables
    uint256 private s_tokenCounter;
    string[] internal s_nftTokenUris;
    uint256 private immutable i_NFTTokenUriCount;
    uint256 private immutable i_mintFee;

    bool public s_initialized;

    //VRF Helper
    /**
     * @notice s_requestIdToSender keeps track of address requesting VRF to mint NFT.
     * s_addressToUri keeps track of addresses and what NFT URI they minted.
     */
    mapping(uint256 => address) public s_requestIdToSender;
    mapping(address => string) public s_addressToUri;
    mapping(address => bool) public hasMintedNFT;

    //Events
    event NftRequested(uint256 indexed requestId, address requester);
    event NftMinted(string tokenUri, address minter);

    //Errors
    error KryptorenaNft__NeedMoreAVAXSent();
    error Kryptorena__TransferFailed();
    error KryptorenaNft__AlreadyMintedNft();

    /**
     * @dev Sets the contract's VRF coordinator, subscription ID, gas lane, callback gas limit, and card token URIs.
     * @param vrfCoordinatorV2 The address of the VRF coordinator contract to use.
     * @param subscriptionId The ID of the VRF subscription to use.
     * @param gasLane The gas lane to use for VRF requests.
     * @param callbackGasLimit The gas limit to use for VRF request callbacks.
     * @param NFTTokenUris An array of URIs to use for the contract's card tokens.
     */
    constructor(
        address vrfCoordinatorV2,
        uint64 subscriptionId,
        bytes32 gasLane,
        uint32 callbackGasLimit,
        string[] memory NFTTokenUris,
        uint256 mintFee
    ) VRFConsumerBaseV2(vrfCoordinatorV2) ERC721("Kryptorena", "KTA") {
        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);
        i_subscriptionId = subscriptionId;
        i_gasLane = gasLane;
        i_callbackGasLimit = callbackGasLimit;
        s_nftTokenUris = NFTTokenUris;
        i_NFTTokenUriCount = s_nftTokenUris.length;
        i_mintFee = mintFee;
    }

    /**
     * @notice Requests a random number to use for creating a new NFT.
     * @dev Sends a VRF request to the coordinator contract and associates the request ID with the sender's address. Emits an event as well.
     * @return requestId The ID of the VRF request.
     */

    function requestNft(address player) public payable returns (uint256 requestId) {
        if (msg.value < i_mintFee) {
            revert KryptorenaNft__NeedMoreAVAXSent();
        }
        if (hasMintedNFT[player]) {
            revert KryptorenaNft__AlreadyMintedNft();
        }
        requestId = i_vrfCoordinator.requestRandomWords(
            i_gasLane,
            i_subscriptionId,
            REQUEST_CONFIRMATIONS,
            i_callbackGasLimit,
            NUM_WORDS
        );
        s_requestIdToSender[requestId] = player;
        emit NftRequested(requestId, player);
    }

    /**
     * @notice Fulfills a VRF request by creating a new NFT with the given random number.
     * @dev Creates a new NFT with the given random number, assigns it to the sender's address, and sets its token URI.
     * @param requestId The ID of the VRF request to fulfill.
     * @param randomWords An array of random words (number) generated by the VRF request.
     */

    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {
        address nftOwner = s_requestIdToSender[requestId];
        uint256 newTokenId = s_tokenCounter;
        s_tokenCounter = s_tokenCounter + 1;
        uint256 randomNumber = randomWords[0] % i_NFTTokenUriCount;
        hasMintedNFT[nftOwner] = true;
        s_addressToUri[nftOwner] = s_nftTokenUris[randomNumber];
        _safeMint(nftOwner, newTokenId);
        _setTokenURI(newTokenId, s_nftTokenUris[randomNumber]);
        sendUriToKryptorena(nftOwner, s_addressToUri[nftOwner]);
        emit NftMinted(s_nftTokenUris[randomNumber], nftOwner);
    }

    function withdraw() public onlyOwner {
        uint256 amount = address(this).balance;
        (bool success, ) = payable(msg.sender).call{value: amount}("");
        if (!success) {
            revert Kryptorena__TransferFailed();
        }
    }

    function initiateContract(address kryptorena) public onlyOwner {
        require(!s_initialized, "Already initialized");
        i_kryptorena = Kryptorena(kryptorena);
        s_initialized = true;
    }

    function sendUriToKryptorena(address _player, string memory _uri) private {
        i_kryptorena.registerAddressToUri(_player, _uri);
    }

    function getTokenCounter() public view returns (uint256) {
        return s_tokenCounter;
    }

    function getNftUriAtIndex(uint256 index) public view returns (string memory) {
        return s_nftTokenUris[index];
    }

    function getNftUriList() public view returns (string[] memory) {
        return s_nftTokenUris;
    }

    function getNftTokenUriCount() public view returns (uint256) {
        return i_NFTTokenUriCount;
    }

    function getRequestIdToSender(uint256 index) public view returns (address) {
        return s_requestIdToSender[index];
    }

    function getSubscriptionId() public view returns (uint64) {
        return i_subscriptionId;
    }

    function getCallbackGasLimit() public view returns (uint32) {
        return i_callbackGasLimit;
    }

    function getGasLane() public view returns (bytes32) {
        return i_gasLane;
    }

    function getUriOfAddress(address _address) public view returns (string memory) {
        return s_addressToUri[_address];
    }

    function getRequestConfirmations() public pure returns (uint16) {
        return REQUEST_CONFIRMATIONS;
    }

    function getNumWords() public pure returns (uint32) {
        return NUM_WORDS;
    }
}
