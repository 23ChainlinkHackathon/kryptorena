//SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol";
import "@chainlink/contracts/src/v0.8/ConfirmedOwner.sol";
import "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol";

contract KryptorenaNft is VRFConsumerBaseV2, ConfirmedOwner, ERC721URIStorage {
    //Chainlink VRF Variables
    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;
    uint64 private immutable i_subscriptionId;
    bytes32 private immutable i_gasLane;
    uint32 private immutable i_callbackGasLimit;
    uint16 private constant REQUEST_CONFIRMATIONS = 3;
    uint32 private constant NUM_WORDS = 1;

    //NFT variables
    uint256 private s_tokenCounter;
    string[] internal s_cardTokenUris;
    uint256 private immutable i_max_amount;


    //VRF Helper
    /**
     * @dev Keeps track of address requesting VRF to mint NFT.
     */
    mapping(uint256 => address) public s_requestIdToSender;

    //Events
    event NftRequested(uint256 indexed requestId, address requester);
    event NftMinted(uint256[2] attack_defense, address minter);

    /**
     * @dev Sets the contract's VRF coordinator, subscription ID, gas lane, callback gas limit, and card token URIs.
     * @param vrfCoordinatorV2 The address of the VRF coordinator contract to use.
     * @param subscriptionId The ID of the VRF subscription to use.
     * @param gasLane The gas lane to use for VRF requests.
     * @param callbackGasLimit The gas limit to use for VRF request callbacks.
     * @param cardTokenUris An array of URIs to use for the contract's card tokens.
     */
    constructor(
        address vrfCoordinatorV2,
        uint64 subscriptionId,
        bytes32 gasLane,
        uint32 callbackGasLimit,
        string[] memory cardTokenUris
    ) VRFConsumerBaseV2(vrfCoordinatorV2) ConfirmedOwner(msg.sender) ERC721("Kryptorena", "KTA") {
        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);
        i_subscriptionId = subscriptionId;
        i_gasLane = gasLane;
        i_callbackGasLimit = callbackGasLimit;
        s_cardTokenUris = cardTokenUris;
        i_Max_Amount = s_NFTTokenUris.length;

    }

    /**
     * @notice Requests a random number to use for creating a new NFT.
     * @dev Sends a VRF request to the coordinator contract and associates the request ID with the sender's address. Emits an event as well.
     * @return requestId The ID of the VRF request.
     */

    function requestNft() public payable returns (uint256 requestId) {
        requestId = i_vrfCoordinator.requestRandomWords(
            i_gasLane,
            i_subscriptionId,
            REQUEST_CONFIRMATIONS,
            i_callbackGasLimit,
            NUM_WORDS
        );
        s_requestIdToSender[requestId] = msg.sender;
        emit NftRequested(requestId, msg.sender);
    }

    /**
     * @notice Fulfills a VRF request by creating a new NFT with the given random number.
     * @dev Creates a new NFT with the given random number, assigns it to the sender's address, and sets its token URI.
     * @param requestId The ID of the VRF request to fulfill.
     * @param randomWords An array of random words (number) generated by the VRF request.
     */

    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {
        address nftOwner = s_requestIdToSender[requestId];
        uint256 randomNumber = randomWords[0] % i_max_amount;
        uint256 newTokenId = s_tokenCounter;
        s_tokenCounter = s_tokenCounter + 1;
        _safeMint(nftOwner, newTokenId);
        _setTokenURI(newTokenId, s_NFTTokenUris[randomNumber]);
    }

    function getTokenCounter() public view returns (uint256) {
        return s_tokenCounter;
    }

    function getCardUri(uint256 index) public view returns (string memory) {
        return s_cardTokenUris[index];
    }
}
